<?php


namespace TODOS\LIB;


class AppSessionHandler extends \SessionHandler
{
    private $sessionName = 'MYAPPSESS';
    private $sessionMaxLifeTime = 0;
    private $sessionSSL = false;
    private $sessionHTTPOnly = true;
    private $sessionPath = '/';
    private $sessionDomain = APP_HOST_NAME; # check config file for the constant
    private $sessionSavePath = SESSION_SAVE_PATH; # check config file for the constant

    # encryption tools.
    # mcrypt should be installed
    private static $sessionCipherAlgo = MCRYPT_BLOWFISH;
    private static $sessionCipherMode = MCRYPT_MODE_ECB;
    private static $sessionCipherKey = APP_KEY;

    private static $ttl = 1;

    public function __construct()
    {
        ini_set('session.use_cookies', 1);
        ini_set('session.use_only_cookies', 1);
        ini_set('session.use_trans_sid', 0);
        ini_set('session.save_handler', 'files');

        session_name($this->sessionName);
        session_save_path($this->sessionSavePath);
        session_set_cookie_params(
                $this->sessionMaxLifeTime,
                $this->sessionPath,
                $this->sessionDomain,
                $this->sessionSSL,
                $this->sessionHTTPOnly
            );
        session_set_save_handler($this, true);
    }

    public function __get($key)
    {
        return isset($_SESSION[$key]) ? $_SESSION[$key] : false;
    }

    public function __set($key, $val)
    {
        $_SESSION[$key] = $val;
    }

    public function __isset($key)
    {
        return isset($_SESSION[$key]);
    }

    public function write($session_id, $session_data)
    {
        return parent::write($session_id, mcrypt_encrypt(self::$sessionCipherAlgo, self::$sessionCipherKey, $session_data, self::$sessionCipherMode));
        // TODO: Change the autogenerated stub
    }

    public function read($session_id)
    {
        return mcrypt_decrypt(self::$sessionCipherAlgo, self::$sessionCipherKey, parent::read($session_id), self::$sessionCipherMode);
        // TODO: Change the autogenerated stub
    }

    private function setSessionStartTime()
    {
        if (!isset($this->sessionStartTime)){
            $this->sessionStartTime = time();
        }
    }

    public function start()
    {
        /*
        if ('' === session_id()){
            if (session_start()){
                $this->setSessionStartTime();
            }
        }*/
        if (session_start()){
            $this->setSessionStartTime();
        }
    }

    public function w_close()
    {
        session_write_close();
    }

    public function kill()
    {
        session_unset(); # delete All the values inside the $_SESSION array
        setcookie($this->sessionName, '', time() - 3600,$this->sessionPath, $this->sessionDomain, $this->sessionSSL, $this->sessionHTTPOnly); # delete the cookie from the client
        session_destroy(); # delete the session handler file from the folder
    }

    /*private function renewSession()
    {
        $this->sessionStartTime = time();
        return session_regenerate_id(true);
    }*/

    public function generateFingerPrint()
    {
        // you can put here any data that doesn't change for a user like time zone ...
        $userAgentId = $_SERVER['HTTP_USER_AGENT'];
        $this->cipherkey = random_bytes(32);
        $sessionId = session_id();
        $this->fingerPrint = sha1($userAgentId . $this->cipherkey . $sessionId);
    }

    public function isValidFingerPrint()
    {
        if (isset($this->fingerPrint)){
            $currentFingerPrint = sha1($_SERVER['HTTP_USER_AGENT'] . $this->cipherkey . session_id()); # making the current finger print
            return $currentFingerPrint === $this->fingerPrint;
        }
        return false;
    }

    public function checkSessionValidity()
    {
        if ($this->isValidFingerPrint()){
            if (time() - $this->sessionStartTime > (self::$ttl * 5)){
                # renew the session.
                $this->sessionStartTime = time();
                session_regenerate_id(true); # a new id is set
                $this->generateFingerPrint(); # uses the new id to generate new fingerPrint
            }
        }else{
            $this->kill();
        }
    }
}